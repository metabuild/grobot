/*
 * Copyright 2012 Metabuild Software, LLC. (http://www.metabuild.org)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import org.metabuild.gradle.tasks.*;

/**
 * Builds the Grobot server's war file
 *
 * @author jburbridge
 * @since 9/29/2012
 */
description = 'The webapp project for the Grobot master server';

apply plugin: 'war';
apply plugin: 'jetty';
apply plugin: 'eclipse-wtp';

// include static analysis and deployment plugins when building on jenkins 
if (project.hasProperty('environment') && environment != 'development') {

	apply from: "${rootDir.path}/gradle/cobertura.gradle";
	apply from: "${rootDir.path}/gradle/cargo.gradle";
	apply plugin: 'findbugs';
	
	findbugs {
		ignoreFailures = true;
	}
}

// add the spring nature to eclipse 
eclipse {
	project {
		buildCommand 'org.springframework.ide.eclipse.core.springbuilder'
		natures << 'org.springframework.ide.eclipse.core.springnature'
	}
}

dependencies {

	providedCompile 'javax.servlet:servlet-api:2.5';
	
	providedRuntime 'org.eclipse.jetty:jetty-servlet:7.6.7.v20120910',
		'org.slf4j:slf4j-simple:1.7.1';

	compile project(':core'),
		'org.slf4j:slf4j-api:1.7.1',
		'javax.mail:mail:1.4.5',
		'javax.activation:activation:1.1.1',
		'org.springframework:spring-webmvc:3.2.1.RELEASE',
		'org.springframework:spring-jdbc:3.2.1.RELEASE',
		'org.springframework:spring-orm:3.2.1.RELEASE',
		'org.springframework.data:spring-data-jpa:1.2.0.RELEASE',
		'org.springframework:spring-tx:3.2.1.RELEASE',
		'org.springframework:spring-jms:3.2.1.RELEASE',
		'org.springframework.security:spring-security-javaconfig:1.0.0.CI-SNAPSHOT',
		'org.apache.tiles:tiles-core:3.0.1',
		'org.apache.tiles:tiles-template:3.0.1',
		'org.apache.tiles:tiles-jsp:3.0.1',
		'org.apache.tiles:tiles-extras:3.0.1',
		'org.apache.activemq:activemq-core:5.6.0',
		'javax.jms:jms:1.1';
		

	runtime 'cglib:cglib:2.2.2',
		'org.apache.xbean:xbean-spring:3.11',
		'com.h2database:h2:1.3.168';
	
	testCompile 'org.mockito:mockito-all:1.8.5',
		'junit:junit:4.10',
		'org.springframework:spring-test:3.2.1.RELEASE',
		project(':core').sourceSets.test.output // import test utils
	
	integrationCompile sourceSets.main.output,
		configurations.testCompile,
		sourceSets.test.output;
	
	integrationRuntime configurations.testRuntime,
		configurations.testCompile
	
}

test {
	exclude '**/AbstractSpringEnabledTest*'
	systemProperty 'spring.profiles.active', 'default, test'
}

integrationTest {
	exclude '**/AbstractDataTester*'
	systemProperty 'spring.profiles.active', 'integration-test'
}

war {
	manifest {
		attributes 'Implementation-Title': eclipse.project.name,
			'Implementation-Vendor': 'Metabuild Software',
			'Implementation-Version': version;
	}
}

// produce a jar file for our test classes
task testJar(type: Jar, dependsOn: test) {
	classifier = 'tests'
	from sourceSets.test.output
}

// produce a jar file for our source files
task sourceJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.java
}

// produce a jar file for our javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

// add all of the artifacts above to our archives list
artifacts {
	archives testJar
	archives sourceJar
	archives javadocJar
}

/*
 * Setup jetty to run local integration tests
 */
jettyRun {
	doFirst {
		System.setProperty('spring.profiles.active', 'default, dev')
		System.setProperty('user.dir', "${projectDir}")
	}
	// if running from a development environment, keep Jetty running in the foreground
	daemon = (project.hasProperty('environment') && environment != 'development');
	httpPort = 9090;
	contextPath = '/';
}

[jettyRun, jettyRunWar, jettyStop]*.stopPort = 9091;
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey';

/*
 *  for non-development builds, make sure we slot the integration
 *  tests into the build cycle. integration tests come in after
 *  war, assembly and regular checks, but before build
 */
if (project.hasProperty('environment') && environment == 'build' ) {
	jettyRun.dependsOn([check, integrationClasses]);
	integrationTest.dependsOn(jettyRun);
	jettyStop.dependsOn(integrationTest);
	build.dependsOn(jettyStop);
}

/*
 * Initialize the source / resource directories
 */
task intialize(type: CreateDirectories) {
	directories = [
		sourceSets*.java.srcDirs,
		sourceSets*.resources.srcDirs,
		file(webAppDirName)
	].flatten()
}
tasks.eclipse.dependsOn(intialize)

